# .env.example
# WebFuzzing Pro - Variables de Entorno

# Entorno de ejecución
FLASK_ENV=development
WF_ENVIRONMENT=development

# Configuración de la aplicación
WF_CONFIG_PATH=config.json
WF_LOG_LEVEL=INFO
WF_MAX_WORKERS=10

# Base de datos
WF_DATABASE_PATH=webfuzzing.db
WF_BACKUP_INTERVAL=86400

# Configuración web
WF_WEB_HOST=127.0.0.1
WF_WEB_PORT=5000
WF_WEB_DEBUG=true
WF_SECRET_KEY=your-secret-key-here

# Configuración API
WF_API_HOST=127.0.0.1
WF_API_PORT=8000
WF_API_KEY=your-api-key-here

# Notificaciones Telegram
WF_TELEGRAM_ENABLED=false
WF_TELEGRAM_BOT_TOKEN=
WF_TELEGRAM_CHAT_ID=

# Notificaciones Email
WF_EMAIL_ENABLED=false
WF_EMAIL_SMTP_SERVER=smtp.gmail.com
WF_EMAIL_SMTP_PORT=587
WF_EMAIL_USERNAME=
WF_EMAIL_PASSWORD=
WF_EMAIL_RECIPIENTS=

# Herramientas externas
WF_FFUF_ENABLED=true
WF_FFUF_PATH=ffuf
WF_DIRSEARCH_ENABLED=true
WF_DIRSEARCH_PATH=python3 -m dirsearch

# Configuración de fuzzing
WF_FUZZING_TIMEOUT=5
WF_FUZZING_DELAY=0.1
WF_FUZZING_MAX_PATH_LENGTH=12

# Docker
DOCKER_BUILDKIT=1
COMPOSE_DOCKER_CLI_BUILD=1

# Makefile
.PHONY: help install test run clean docker deploy

# Variables
PYTHON = python3
PIP = pip3
DOCKER = docker
DOCKER_COMPOSE = docker-compose

# Colores para output
RED = \033[0;31m
GREEN = \033[0;32m
YELLOW = \033[0;33m
NC = \033[0m # No Color

help: ## Mostrar ayuda
	@echo "WebFuzzing Pro - Comandos disponibles:"
	@echo ""
	@grep -E '^[a-zA-Z_-]+:.*?## .*$$' $(MAKEFILE_LIST) | sort | awk 'BEGIN {FS = ":.*?## "}; {printf "\033[36m%-20s\033[0m %s\n", $$1, $$2}'

install: ## Instalar dependencias y configurar entorno
	@echo "$(GREEN)📦 Instalando WebFuzzing Pro...$(NC)"
	$(PYTHON) -m venv venv
	. venv/bin/activate && $(PIP) install -r requirements.txt
	$(PYTHON) scripts/install.py
	@echo "$(GREEN)✅ Instalación completada$(NC)"

install-dev: ## Instalar dependencias de desarrollo
	@echo "$(GREEN)🔧 Instalando dependencias de desarrollo...$(NC)"
	. venv/bin/activate && $(PIP) install -r requirements-dev.txt
	@echo "$(GREEN)✅ Dependencias de desarrollo instaladas$(NC)"

test: ## Ejecutar tests
	@echo "$(GREEN)🧪 Ejecutando tests...$(NC)"
	$(PYTHON) tests/test_fuzzing_engine.py
	@echo "$(GREEN)✅ Tests completados$(NC)"

test-coverage: ## Ejecutar tests con coverage
	@echo "$(GREEN)🧪 Ejecutando tests con coverage...$(NC)"
	. venv/bin/activate && pytest --cov=. tests/
	@echo "$(GREEN)✅ Tests con coverage completados$(NC)"

run: ## Ejecutar aplicación en modo desarrollo
	@echo "$(GREEN)🚀 Iniciando WebFuzzing Pro...$(NC)"
	$(PYTHON) main.py --mode all

run-web: ## Ejecutar solo dashboard web
	@echo "$(GREEN)🌐 Iniciando dashboard web...$(NC)"
	$(PYTHON) main.py --mode web

run-api: ## Ejecutar solo API REST
	@echo "$(GREEN)🔗 Iniciando API REST...$(NC)"
	$(PYTHON) main.py --mode api

run-scan: ## Ejecutar solo escaneo manual
	@echo "$(GREEN)🔍 Ejecutando escaneo manual...$(NC)"
	$(PYTHON) main.py --mode scan

setup: ## Configurar entorno después de la instalación
	@echo "$(GREEN)⚙️ Configurando entorno...$(NC)"
	$(PYTHON) scripts/setup_environment.py
	@echo "$(GREEN)✅ Entorno configurado$(NC)"

migrate: ## Ejecutar migraciones de base de datos
	@echo "$(GREEN)🔄 Ejecutando migraciones...$(NC)"
	$(PYTHON) scripts/migrate_db.py
	@echo "$(GREEN)✅ Migraciones completadas$(NC)"

clean: ## Limpiar archivos temporales y cache
	@echo "$(YELLOW)🧹 Limpiando archivos temporales...$(NC)"
	find . -type f -name "*.pyc" -delete
	find . -type d -name "__pycache__" -delete
	find . -type d -name "*.egg-info" -exec rm -rf {} +
	rm -rf .coverage htmlcov/ .pytest_cache/
	@echo "$(GREEN)✅ Limpieza completada$(NC)"

clean-data: ## Limpiar datos de desarrollo (¡CUIDADO!)
	@echo "$(RED)⚠️ Limpiando datos de desarrollo...$(NC)"
	rm -rf data/resultados/*
	rm -f data/descubiertos.txt
	rm -f webfuzzing.db
	rm -rf logs/*
	@echo "$(YELLOW)✅ Datos de desarrollo limpiados$(NC)"

docker-build: ## Construir imagen Docker
	@echo "$(GREEN)🐳 Construyendo imagen Docker...$(NC)"
	$(DOCKER) build -t webfuzzing-pro:latest .
	@echo "$(GREEN)✅ Imagen Docker construida$(NC)"

docker-run: ## Ejecutar en Docker
	@echo "$(GREEN)🐳 Ejecutando en Docker...$(NC)"
	$(DOCKER_COMPOSE) up -d
	@echo "$(GREEN)✅ WebFuzzing Pro ejecutándose en Docker$(NC)"

docker-stop: ## Detener contenedores Docker
	@echo "$(YELLOW)🐳 Deteniendo contenedores...$(NC)"
	$(DOCKER_COMPOSE) down
	@echo "$(GREEN)✅ Contenedores detenidos$(NC)"

docker-logs: ## Ver logs de Docker
	$(DOCKER_COMPOSE) logs -f

deploy-dev: ## Deploy en entorno de desarrollo
	@echo "$(GREEN)🚀 Deploying a desarrollo...$(NC)"
	$(PYTHON) scripts/deploy.py --env development
	@echo "$(GREEN)✅ Deploy de desarrollo completado$(NC)"

deploy-staging: ## Deploy en entorno de staging
	@echo "$(GREEN)🚀 Deploying a staging...$(NC)"
	$(PYTHON) scripts/deploy.py --env staging --docker
	@echo "$(GREEN)✅ Deploy de staging completado$(NC)"

deploy-prod: ## Deploy en entorno de producción
	@echo "$(GREEN)🚀 Deploying a producción...$(NC)"
	$(PYTHON) scripts/deploy.py --env production --systemd --docker
	@echo "$(GREEN)✅ Deploy de producción completado$(NC)"

backup: ## Crear backup completo
	@echo "$(GREEN)💾 Creando backup...$(NC)"
	mkdir -p backups/manual_$(shell date +%Y%m%d_%H%M%S)
	cp -r data/ backups/manual_$(shell date +%Y%m%d_%H%M%S)/
	cp config.json backups/manual_$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
	cp webfuzzing.db backups/manual_$(shell date +%Y%m%d_%H%M%S)/ 2>/dev/null || true
	@echo "$(GREEN)✅ Backup creado$(NC)"

lint: ## Ejecutar linting
	@echo "$(GREEN)🔍 Ejecutando linting...$(NC)"
	. venv/bin/activate && flake8 . --max-line-length=88 --exclude=venv
	@echo "$(GREEN)✅ Linting completado$(NC)"

format: ## Formatear código con black
	@echo "$(GREEN)🎨 Formateando código...$(NC)"
	. venv/bin/activate && black . --exclude=venv
	@echo "$(GREEN)✅ Código formateado$(NC)"

security: ## Ejecutar análisis de seguridad
	@echo "$(GREEN)🔒 Ejecutando análisis de seguridad...$(NC)"
	. venv/bin/activate && bandit -r . -x venv/,tests/
	@echo "$(GREEN)✅ Análisis de seguridad completado$(NC)"

docs: ## Generar documentación
	@echo "$(GREEN)📚 Generando documentación...$(NC)"
	. venv/bin/activate && sphinx-build -b html docs/ docs/_build/
	@echo "$(GREEN)✅ Documentación generada$(NC)"

status: ## Mostrar estado del sistema
	@echo "$(GREEN)📊 Estado del sistema:$(NC)"
	@echo "Python: $(shell $(PYTHON) --version)"
	@echo "Entorno virtual: $(shell test -d venv && echo "✅ Creado" || echo "❌ No encontrado")"
	@echo "Configuración: $(shell test -f config.json && echo "✅ Configurado" || echo "❌ No configurado")"
	@echo "Base de datos: $(shell test -f webfuzzing.db && echo "✅ Creada" || echo "❌ No encontrada")"
	@echo "Docker: $(shell $(DOCKER) --version 2>/dev/null || echo "❌ No instalado")"

update: ## Actualizar dependencias
	@echo "$(GREEN)🔄 Actualizando dependencias...$(NC)"
	. venv/bin/activate && $(PIP) install --upgrade -r requirements.txt
	@echo "$(GREEN)✅ Dependencias actualizadas$(NC)"

check: ## Verificar instalación completa
	@echo "$(GREEN)✅ Verificando instalación...$(NC)"
	$(PYTHON) scripts/test_system.py
	@echo "$(GREEN)✅ Verificación completada$(NC)"

# Alias comunes
dev: run ## Alias para run
start: run ## Alias para run
stop: docker-stop ## Alias para docker-stop
build: docker-build ## Alias para docker-build